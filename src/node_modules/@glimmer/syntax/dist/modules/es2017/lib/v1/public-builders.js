import { assert, assign, deprecate, isPresent } from '@glimmer/util';
import { SYNTHETIC_LOCATION } from '../source/location';
import { Source } from '../source/source';
import { SourceSpan } from '../source/span';
import { PathExpressionImplV1 } from './legacy-interop';

let _SOURCE;

function SOURCE() {
  if (!_SOURCE) {
    _SOURCE = new Source('', '(synthetic)');
  }

  return _SOURCE;
}

function buildMustache(path, params, hash, raw, loc, strip) {
  if (typeof path === 'string') {
    path = buildPath(path);
  }

  return {
    type: 'MustacheStatement',
    path,
    params: params || [],
    hash: hash || buildHash([]),
    escaped: !raw,
    trusting: !!raw,
    loc: buildLoc(loc || null),
    strip: strip || {
      open: false,
      close: false
    }
  };
}

function buildBlock(path, params, hash, _defaultBlock, _elseBlock, loc, openStrip, inverseStrip, closeStrip) {
  let defaultBlock;
  let elseBlock;

  if (_defaultBlock.type === 'Template') {
    if (false
    /* LOCAL_DEBUG */
    ) {
      (false && !(false) && deprecate(`b.program is deprecated. Use b.blockItself instead.`));
    }

    defaultBlock = assign({}, _defaultBlock, {
      type: 'Block'
    });
  } else {
    defaultBlock = _defaultBlock;
  }

  if (_elseBlock !== undefined && _elseBlock !== null && _elseBlock.type === 'Template') {
    if (false
    /* LOCAL_DEBUG */
    ) {
      (false && !(false) && deprecate(`b.program is deprecated. Use b.blockItself instead.`));
    }

    elseBlock = assign({}, _elseBlock, {
      type: 'Block'
    });
  } else {
    elseBlock = _elseBlock;
  }

  return {
    type: 'BlockStatement',
    path: buildPath(path),
    params: params || [],
    hash: hash || buildHash([]),
    program: defaultBlock || null,
    inverse: elseBlock || null,
    loc: buildLoc(loc || null),
    openStrip: openStrip || {
      open: false,
      close: false
    },
    inverseStrip: inverseStrip || {
      open: false,
      close: false
    },
    closeStrip: closeStrip || {
      open: false,
      close: false
    }
  };
}

function buildElementModifier(path, params, hash, loc) {
  return {
    type: 'ElementModifierStatement',
    path: buildPath(path),
    params: params || [],
    hash: hash || buildHash([]),
    loc: buildLoc(loc || null)
  };
}

function buildPartial(name, params, hash, indent, loc) {
  return {
    type: 'PartialStatement',
    name: name,
    params: params || [],
    hash: hash || buildHash([]),
    indent: indent || '',
    strip: {
      open: false,
      close: false
    },
    loc: buildLoc(loc || null)
  };
}

function buildComment(value, loc) {
  return {
    type: 'CommentStatement',
    value: value,
    loc: buildLoc(loc || null)
  };
}

function buildMustacheComment(value, loc) {
  return {
    type: 'MustacheCommentStatement',
    value: value,
    loc: buildLoc(loc || null)
  };
}

function buildConcat(parts, loc) {
  if (!isPresent(parts)) {
    throw new Error(`b.concat requires at least one part`);
  }

  return {
    type: 'ConcatStatement',
    parts: parts || [],
    loc: buildLoc(loc || null)
  };
}

function buildElement(tag, options = {}) {
  let {
    attrs,
    blockParams,
    modifiers,
    comments,
    children,
    loc
  } = options;
  let tagName; // this is used for backwards compat, prior to `selfClosing` being part of the ElementNode AST

  let selfClosing = false;

  if (typeof tag === 'object') {
    selfClosing = tag.selfClosing;
    tagName = tag.name;
  } else if (tag.slice(-1) === '/') {
    tagName = tag.slice(0, -1);
    selfClosing = true;
  } else {
    tagName = tag;
  }

  return {
    type: 'ElementNode',
    tag: tagName,
    selfClosing: selfClosing,
    attributes: attrs || [],
    blockParams: blockParams || [],
    modifiers: modifiers || [],
    comments: comments || [],
    children: children || [],
    loc: buildLoc(loc || null)
  };
}

function buildAttr(name, value, loc) {
  return {
    type: 'AttrNode',
    name: name,
    value: value,
    loc: buildLoc(loc || null)
  };
}

function buildText(chars, loc) {
  return {
    type: 'TextNode',
    chars: chars || '',
    loc: buildLoc(loc || null)
  };
} // Expressions


function buildSexpr(path, params, hash, loc) {
  return {
    type: 'SubExpression',
    path: buildPath(path),
    params: params || [],
    hash: hash || buildHash([]),
    loc: buildLoc(loc || null)
  };
}

function headToString(head) {
  switch (head.type) {
    case 'AtHead':
      return {
        original: head.name,
        parts: [head.name]
      };

    case 'ThisHead':
      return {
        original: `this`,
        parts: []
      };

    case 'VarHead':
      return {
        original: head.name,
        parts: [head.name]
      };
  }
}

function buildHead(original, loc) {
  let [head, ...tail] = original.split('.');
  let headNode;

  if (head === 'this') {
    headNode = {
      type: 'ThisHead',
      loc: buildLoc(loc || null)
    };
  } else if (head[0] === '@') {
    headNode = {
      type: 'AtHead',
      name: head,
      loc: buildLoc(loc || null)
    };
  } else {
    headNode = {
      type: 'VarHead',
      name: head,
      loc: buildLoc(loc || null)
    };
  }

  return {
    head: headNode,
    tail
  };
}

function buildThis(loc) {
  return {
    type: 'ThisHead',
    loc: buildLoc(loc || null)
  };
}

function buildAtName(name, loc) {
  // the `@` should be included so we have a complete source range
  (false && assert(name[0] === '@', `call builders.at() with a string that starts with '@'`));
  return {
    type: 'AtHead',
    name,
    loc: buildLoc(loc || null)
  };
}

function buildVar(name, loc) {
  (false && assert(name !== 'this', `You called builders.var() with 'this'. Call builders.this instead`));
  (false && assert(name[0] !== '@', `You called builders.var() with '${name}'. Call builders.at('${name}') instead`));
  return {
    type: 'VarHead',
    name,
    loc: buildLoc(loc || null)
  };
}

function buildHeadFromString(head, loc) {
  if (head[0] === '@') {
    return buildAtName(head, loc);
  } else if (head === 'this') {
    return buildThis(loc);
  } else {
    return buildVar(head, loc);
  }
}

function buildNamedBlockName(name, loc) {
  return {
    type: 'NamedBlockName',
    name,
    loc: buildLoc(loc || null)
  };
}

function buildCleanPath(head, tail, loc) {
  let {
    original: originalHead,
    parts: headParts
  } = headToString(head);
  let parts = [...headParts, ...tail];
  let original = [...originalHead, ...parts].join('.');
  return new PathExpressionImplV1(original, head, tail, buildLoc(loc || null));
}

function buildPath(path, loc) {
  if (typeof path !== 'string') {
    if ('type' in path) {
      return path;
    } else {
      let {
        head,
        tail
      } = buildHead(path.head, SourceSpan.broken());
      (false && assert(tail.length === 0, `builder.path({ head, tail }) should not be called with a head with dots in it`));
      let {
        original: originalHead
      } = headToString(head);
      return new PathExpressionImplV1([originalHead, ...tail].join('.'), head, tail, buildLoc(loc || null));
    }
  }

  let {
    head,
    tail
  } = buildHead(path, SourceSpan.broken());
  return new PathExpressionImplV1(path, head, tail, buildLoc(loc || null));
}

function buildLiteral(type, value, loc) {
  return {
    type,
    value,
    original: value,
    loc: buildLoc(loc || null)
  };
} // Miscellaneous


function buildHash(pairs, loc) {
  return {
    type: 'Hash',
    pairs: pairs || [],
    loc: buildLoc(loc || null)
  };
}

function buildPair(key, value, loc) {
  return {
    type: 'HashPair',
    key: key,
    value,
    loc: buildLoc(loc || null)
  };
}

function buildProgram(body, blockParams, loc) {
  return {
    type: 'Template',
    body: body || [],
    blockParams: blockParams || [],
    loc: buildLoc(loc || null)
  };
}

function buildBlockItself(body, blockParams, chained = false, loc) {
  return {
    type: 'Block',
    body: body || [],
    blockParams: blockParams || [],
    chained,
    loc: buildLoc(loc || null)
  };
}

function buildTemplate(body, blockParams, loc) {
  return {
    type: 'Template',
    body: body || [],
    blockParams: blockParams || [],
    loc: buildLoc(loc || null)
  };
}

function buildPosition(line, column) {
  return {
    line,
    column
  };
}

function buildLoc(...args) {
  if (args.length === 1) {
    let loc = args[0];

    if (loc && typeof loc === 'object') {
      return SourceSpan.forHbsLoc(SOURCE(), loc);
    } else {
      return SourceSpan.forHbsLoc(SOURCE(), SYNTHETIC_LOCATION);
    }
  } else {
    let [startLine, startColumn, endLine, endColumn, _source] = args;
    let source = _source ? new Source('', _source) : SOURCE();
    return SourceSpan.forHbsLoc(source, {
      start: {
        line: startLine,
        column: startColumn
      },
      end: {
        line: endLine,
        column: endColumn
      }
    });
  }
}

export default {
  mustache: buildMustache,
  block: buildBlock,
  partial: buildPartial,
  comment: buildComment,
  mustacheComment: buildMustacheComment,
  element: buildElement,
  elementModifier: buildElementModifier,
  attr: buildAttr,
  text: buildText,
  sexpr: buildSexpr,
  concat: buildConcat,
  hash: buildHash,
  pair: buildPair,
  literal: buildLiteral,
  program: buildProgram,
  blockItself: buildBlockItself,
  template: buildTemplate,
  loc: buildLoc,
  pos: buildPosition,
  path: buildPath,
  fullPath: buildCleanPath,
  head: buildHeadFromString,
  at: buildAtName,
  var: buildVar,
  this: buildThis,
  blockName: buildNamedBlockName,
  string: literal('StringLiteral'),
  boolean: literal('BooleanLiteral'),
  number: literal('NumberLiteral'),

  undefined() {
    return buildLiteral('UndefinedLiteral', undefined);
  },

  null() {
    return buildLiteral('NullLiteral', null);
  }

};

function literal(type) {
  return function (value, loc) {
    return buildLiteral(type, value, loc);
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,