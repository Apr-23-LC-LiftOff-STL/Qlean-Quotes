import { isKeyword } from './keywords';
import { preprocess } from './parser/tokenizer-event-handlers';
import traverse from './traversal/traverse';
/**
 * Gets the correct Token from the Node based on it's type
 */

function tokensFromType(node, scopedTokens, options) {
  if (node.type === 'PathExpression') {
    if (node.head.type === 'AtHead' || node.head.type === 'ThisHead') {
      return;
    }

    var possbleToken = node.head.name;

    if (scopedTokens.indexOf(possbleToken) === -1) {
      return possbleToken;
    }
  } else if (node.type === 'ElementNode') {
    var tag = node.tag;

    var _char = tag.charAt(0);

    if (_char === ':' || _char === '@') {
      return;
    }

    if (!options.includeHtmlElements && tag.indexOf('.') === -1 && tag.toLowerCase() === tag) {
      return;
    }

    if (tag.substr(0, 5) === 'this.') {
      return;
    }

    if (scopedTokens.indexOf(tag) !== -1) {
      return;
    }

    return tag;
  }
}
/**
 * Adds tokens to the tokensSet based on their node.type
 */


function addTokens(tokensSet, node, scopedTokens, options) {
  var maybeTokens = tokensFromType(node, scopedTokens, options);
  (Array.isArray(maybeTokens) ? maybeTokens : [maybeTokens]).forEach(function (maybeToken) {
    if (maybeToken !== undefined && maybeToken[0] !== '@') {
      var maybeTokenFirstSegment = maybeToken.split('.')[0];

      if (!scopedTokens.includes(maybeTokenFirstSegment)) {
        tokensSet.add(maybeToken.split('.')[0]);
      }
    }
  });
}
/**
 * Parses and traverses a given handlebars html template to extract all template locals
 * referenced that could possible come from the parent scope. Can exclude known keywords
 * optionally.
 */


export function getTemplateLocals(html, options) {
  if (options === void 0) {
    options = {
      includeHtmlElements: false,
      includeKeywords: false
    };
  }

  var ast = preprocess(html);
  var tokensSet = new Set();
  var scopedTokens = [];
  traverse(ast, {
    Block: {
      enter: function enter(_ref) {
        var blockParams = _ref.blockParams;
        blockParams.forEach(function (param) {
          scopedTokens.push(param);
        });
      },
      exit: function exit(_ref2) {
        var blockParams = _ref2.blockParams;
        blockParams.forEach(function () {
          scopedTokens.pop();
        });
      }
    },
    ElementNode: {
      enter: function enter(node) {
        node.blockParams.forEach(function (param) {
          scopedTokens.push(param);
        });
        addTokens(tokensSet, node, scopedTokens, options);
      },
      exit: function exit(_ref3) {
        var blockParams = _ref3.blockParams;
        blockParams.forEach(function () {
          scopedTokens.pop();
        });
      }
    },
    PathExpression: function PathExpression(node) {
      addTokens(tokensSet, node, scopedTokens, options);
    }
  });
  var tokens = [];
  tokensSet.forEach(function (s) {
    return tokens.push(s);
  });

  if (!(options === null || options === void 0 ? void 0 : options.includeKeywords)) {
    tokens = tokens.filter(function (token) {
      return !isKeyword(token);
    });
  }

  return tokens;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,