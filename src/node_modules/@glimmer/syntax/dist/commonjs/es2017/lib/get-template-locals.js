"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getTemplateLocals = getTemplateLocals;

var _keywords = require("./keywords");

var _tokenizerEventHandlers = require("./parser/tokenizer-event-handlers");

var _traverse = _interopRequireDefault(require("./traversal/traverse"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Gets the correct Token from the Node based on it's type
 */
function tokensFromType(node, scopedTokens, options) {
  if (node.type === 'PathExpression') {
    if (node.head.type === 'AtHead' || node.head.type === 'ThisHead') {
      return;
    }

    const possbleToken = node.head.name;

    if (scopedTokens.indexOf(possbleToken) === -1) {
      return possbleToken;
    }
  } else if (node.type === 'ElementNode') {
    const {
      tag
    } = node;
    const char = tag.charAt(0);

    if (char === ':' || char === '@') {
      return;
    }

    if (!options.includeHtmlElements && tag.indexOf('.') === -1 && tag.toLowerCase() === tag) {
      return;
    }

    if (tag.substr(0, 5) === 'this.') {
      return;
    }

    if (scopedTokens.indexOf(tag) !== -1) {
      return;
    }

    return tag;
  }
}
/**
 * Adds tokens to the tokensSet based on their node.type
 */


function addTokens(tokensSet, node, scopedTokens, options) {
  const maybeTokens = tokensFromType(node, scopedTokens, options);
  (Array.isArray(maybeTokens) ? maybeTokens : [maybeTokens]).forEach(maybeToken => {
    if (maybeToken !== undefined && maybeToken[0] !== '@') {
      const maybeTokenFirstSegment = maybeToken.split('.')[0];

      if (!scopedTokens.includes(maybeTokenFirstSegment)) {
        tokensSet.add(maybeToken.split('.')[0]);
      }
    }
  });
}
/**
 * Parses and traverses a given handlebars html template to extract all template locals
 * referenced that could possible come from the parent scope. Can exclude known keywords
 * optionally.
 */


function getTemplateLocals(html, options = {
  includeHtmlElements: false,
  includeKeywords: false
}) {
  const ast = (0, _tokenizerEventHandlers.preprocess)(html);
  const tokensSet = new Set();
  const scopedTokens = [];
  (0, _traverse.default)(ast, {
    Block: {
      enter({
        blockParams
      }) {
        blockParams.forEach(param => {
          scopedTokens.push(param);
        });
      },

      exit({
        blockParams
      }) {
        blockParams.forEach(() => {
          scopedTokens.pop();
        });
      }

    },
    ElementNode: {
      enter(node) {
        node.blockParams.forEach(param => {
          scopedTokens.push(param);
        });
        addTokens(tokensSet, node, scopedTokens, options);
      },

      exit({
        blockParams
      }) {
        blockParams.forEach(() => {
          scopedTokens.pop();
        });
      }

    },

    PathExpression(node) {
      addTokens(tokensSet, node, scopedTokens, options);
    }

  });
  let tokens = [];
  tokensSet.forEach(s => tokens.push(s));

  if (!(options === null || options === void 0 ? void 0 : options.includeKeywords)) {
    tokens = tokens.filter(token => !(0, _keywords.isKeyword)(token));
  }

  return tokens;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,